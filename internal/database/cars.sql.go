// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: cars.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createCar = `-- name: CreateCar :one
INSERT INTO cars ( id, created_at, updated_at, reg_num, mark, model, year, owner_name, owner_surname, owner_patronymic )
VALUES ( $1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
RETURNING id
`

type CreateCarParams struct {
	ID              uuid.UUID
	CreatedAt       time.Time
	UpdatedAt       time.Time
	RegNum          string
	Mark            string
	Model           string
	Year            int32
	OwnerName       string
	OwnerSurname    string
	OwnerPatronymic sql.NullString
}

func (q *Queries) CreateCar(ctx context.Context, arg CreateCarParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, createCar,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.RegNum,
		arg.Mark,
		arg.Model,
		arg.Year,
		arg.OwnerName,
		arg.OwnerSurname,
		arg.OwnerPatronymic,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const deleteCarById = `-- name: DeleteCarById :exec
DELETE FROM cars
WHERE id = $1
`

func (q *Queries) DeleteCarById(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteCarById, id)
	return err
}
